---
import { Icon } from 'astro-icon/components';
import type { Course } from '../types/course';

const course = Astro.props.course as Course;
const courseTopics = course.courseContent || [];
---

<div class="mt-6 bg-white/5 rounded-md border border-white/10 overflow-hidden">
  <h3 class="font-bold text-lg text-white px-4 py-3 border-b border-white/10">Course Content</h3>
  
  <div class="text-white/70 text-sm px-4 py-2 bg-white/5 flex justify-between">
    <span>5 sections • 20 lectures • 9h 15m total length</span>
    <button class="text-teal-400 hover:text-teal-300 transition-colors">Expand all sections</button>
  </div>
  
  <div class="course-topics">
    {courseTopics.map((topic, index) => (
      <div class="topic-container border-b border-white/10 last:border-b-0">
        <button 
          class="topic-header w-full px-4 py-3 flex justify-between items-center text-white hover:bg-white/10 transition-colors"
          data-topic-id={topic.title}
        >
          <div class="flex items-center gap-3">
            <Icon name="chevron-down" class="topic-icon text-xl transition-transform" />
            <span class="font-medium">{index + 1}. {topic.title}</span>
          </div>
            <div class="text-sm text-white/70">
            {topic.subModules?.reduce((total, lesson) => {
              const duration = lesson.duration?.value || 0;
              return total + duration;
            }, 0)} mins
            </div>
        </button>
        
        <div class="topic-content hidden">
          {topic.subModules?.map(lesson => (
            <div class="lesson px-4 py-3 flex justify-between items-center text-white/80 hover:bg-white/5 transition-colors border-t border-white/10 pl-12">
              <div class="flex items-center gap-3">
                <Icon name="play-circle" class="text-lg" />
                <span>{lesson.title}</span>
                {lesson.status && (
                  <span class="bg-teal-500/20 text-teal-300 text-xs px-2 py-0.5 rounded-full">{lesson?.status}</span>
                )}
              </div>
              <span class="text-sm">{lesson.duration?.value} {lesson?.duration?.unit === "minutes" ? "mins" : "hrs"}</span>
            </div>
          ))}
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  // Client-side JavaScript to handle the collapsible functionality
  document.addEventListener('DOMContentLoaded', () => {
    const topicHeaders = document.querySelectorAll('.topic-header');
    
    topicHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const content = header.nextElementSibling;
        const icon = header.querySelector('.topic-icon');
        
        // Toggle content visibility
        content!.classList.toggle('hidden');
        
        // Rotate icon when expanded
        if (content!.classList.contains('hidden')) {
          (icon as HTMLElement).style.transform = 'rotate(0deg)';
        } else {
          (icon as HTMLElement).style.transform = 'rotate(-180deg)';
        }
      });
    });
    
    // Open the first topic by default
    if (topicHeaders.length > 0) {
      (topicHeaders[0] as HTMLElement).click();
    }
    
    // Handle expand/collapse all
    const expandAllBtn = document.querySelector('.course-topics + div button');
    if (expandAllBtn) {
      expandAllBtn.addEventListener('click', () => {
        const allContents = document.querySelectorAll('.topic-content');
        const allIcons = document.querySelectorAll('.topic-icon');
        
        // Check if any are hidden to determine action
        const anyHidden = Array.from(allContents).some(content => 
          content.classList.contains('hidden')
        );
        
        allContents.forEach(content => {
          if (anyHidden) {
            content.classList.remove('hidden');
          } else {
            content.classList.add('hidden');
          }
        });
        
        allIcons.forEach(icon => {
          (icon as HTMLElement).style.transform = anyHidden ? 'rotate(-180deg)' : 'rotate(0deg)';
        });
        
        expandAllBtn.textContent = anyHidden ? 'Collapse all sections' : 'Expand all sections';
      });
    }
  });
</script>

<style>
  .topic-icon {
    transition: transform 0.2s ease-in-out;
  }
  
  .topic-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }
  
  .topic-content:not(.hidden) {
    max-height: 1000px; /* Arbitrary large value */
  }
</style>